#include <GL/gl.h>
#include <GL/glut.h>
#include<math.h>
#include<stdio.h>
#include<string.h>
float c_pos=-.8;
float c_posy=0;
float speed=.0009;
float l_pos1=.8;
float l_pos2=.9;
int x=0;
int s=0;
int t=0;
int z=0;
void myKey(unsigned char key, int x, int y){
	if (key ==119){
    c_posy+=0.1;
    }
    if (key ==' '){
    c_posy+=0.1;
    }
    if (key =='s'){
    c_posy-=0.1;
    }
}
void specialKeys(int key, int x, int y) {
	if (key == GLUT_KEY_UP){
    c_posy+=0.1;
	}
	if (key == GLUT_KEY_DOWN){
    c_posy-=0.1;
	}
}
void mouse(int button, int state, int x, int y) {
	if (button == GLUT_LEFT_BUTTON ){
        c_posy+=0.1;
	}
	if (button == GLUT_RIGHT_BUTTON ){
        c_posy-=0.1;
	}
	}
void body(){
    glBegin(GL_QUADS);
    glColor3f(0.960, 0.887, 0.0864);
    glVertex2f( -0.6, 0.6 );
    glVertex2f( 0.6, 0.6 );
    glVertex2f( 0.6, -0.6 );
    glVertex2f( -0.6, -0.6 );
    glEnd();
}
void head(){
    glBegin(GL_POLYGON);
    glColor3f(0.640, 0.0192, 0.143);
    glVertex2f( -0.2, 0.9 );
    glVertex2f( 0.0, 0.7 );
    glVertex2f( 0.1, 0.8 );
    glVertex2f( 0.1, 0.6 );
    glVertex2f( -0.2, 0.6 );
    glEnd();
}
void tail(){
    glBegin(GL_TRIANGLES);
    glColor3f(0.640, 0.0192, 0.143);
    glVertex2f( 0.6, -0.2 );
    glVertex2f( 0.8, -0.2 );
    glVertex2f( 0.6, -0.5 );
    glEnd();
}
void mouth(){
    glBegin(GL_POLYGON);
    glColor3f(0.890, 0.611, 0.0534);
    glVertex2f( 0.0, 0.1 );
    glVertex2f( 0.1, 0.0 );
    glVertex2f( 0.0, -0.1 );
    glVertex2f( -0.1, 0.0 );
    glEnd();
}
void left_eye(float r){
glColor3f(1.0, 1.0f,1.0);
glBegin(GL_POLYGON);
for( float i=0;i<360;i+=0.1 ){
 float deginrad =i*3.14/180;
glVertex2f(r*cos(deginrad)-0.4,r*sin(deginrad)+0.2);
}
glEnd();
}
void left_eye_small(float r){
glColor3f(0.0588, 0.903, 0.980);
glBegin(GL_POLYGON);
for( float i=0;i<360;i+=0.1 ){
 float deginrad =i*3.14/180;
glVertex2f(r*cos(deginrad)-0.4,r*sin(deginrad)+0.2);
}
glEnd();
}
void right_eye(float r){
glColor3f(1.0, 1.0f,1.0);
glBegin(GL_POLYGON);
for( float i=0;i<360;i+=0.1 ){
 float deginrad =i*3.14/180;
glVertex2f(r*cos(deginrad)+0.4,r*sin(deginrad)+0.2);
}
glEnd();
}
void right_eye_small(float r){
glColor3f(0.0588, 0.903, 0.980);
glBegin(GL_POLYGON);
for( float i=0;i<360;i+=0.1 ){
 float deginrad =i*3.14/180;
glVertex2f(r*cos(deginrad)+0.4,r*sin(deginrad)+0.2);
}
glEnd();
}
void left_leg(float r){
glColor3f(0.970, 0.535, 0.0388);
glBegin(GL_POLYGON);
for( float i=0;i<180;i+=0.1 ){
 float deginrad =i*3.14/180;
glVertex2f(r*cos(deginrad)-0.3,r*sin(deginrad)-0.6);
}
glEnd();
}
void right_leg(float r){
glColor3f(0.970, 0.535, 0.0388);
glBegin(GL_POLYGON);
for( float i=0;i<180;i+=0.1 ){
 float deginrad =i*3.14/180;
glVertex2f(r*cos(deginrad)+0.3,r*sin(deginrad)-0.6);
}
glEnd();
}
void twitty(){
    body();
    head();
    tail();
    mouth();
    left_eye(.2);
    left_eye_small(.09);
    right_eye(.2);
    right_eye_small(.09);
    left_leg(.2);
    right_leg(.2);
    glEnd();
}
void line1(){
    glBegin(GL_POLYGON);
	glColor3f(.7, 0.6, 0.2);
	glVertex2f(.2, .3);
	glVertex2f(.1, .3);
	glVertex2f(.1, 1);
	glVertex2f(.2, 1);
	glEnd();
}
void line2(){
    glBegin(GL_POLYGON);
	glColor3f(0.7, 0.6, 0.2);
	glVertex2f(0.8, -0.2);
	glVertex2f(0.7, -0.2);
	glVertex2f(0.7, -1);
	glVertex2f(0.8, -1);
	glEnd();
}
void score(int score)
{
    glColor3f(0, 0, 0);
    glRasterPos3f(-0.9, 0.9, 0);
    char int_str[20];
    sprintf(int_str,"%d",score++);
    char msg1[] = "Score: ";
    strcat(msg1,int_str);
    char *string = (msg1);

    while(*string){
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,*string++);
    }
}
void lost()
{
    glClearColor( 0,0,0, 1 );  // (In fact, this is the default.)
    glClear( GL_COLOR_BUFFER_BIT );
    glColor3f(1, 0, 0);
    glRasterPos3f(-0.4, 0, 0);
    char msg1[] = "noob player ._. ";
    for (int i = 0; i < strlen(msg1); i++)
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, msg1[i]);
    glutSwapBuffers();
}

void sun(float r){
glColor3f(0.970, 0.955, 0.0582);
glBegin(GL_POLYGON);
for( float i=0;i<360;i+=0.1 ){
 float deginrad =i*3.14/180;
glVertex2f(r*cos(deginrad)-0.8,r*sin(deginrad)+0.8);
}
glEnd();
}
void grass(float r){
glColor3f(0.108, 0.520, 0.0156);
glBegin(GL_POLYGON);
for( float i=0;i<180;i+=0.1 ){
 float deginrad =i*3.14/180;
glVertex2f(r*cos(deginrad),r*sin(deginrad)-1);
}
glEnd();
}
void cloud1(float r){
glColor3f(0.745, 0.980, 0.960);
glBegin(GL_POLYGON);
for( float i=0;i<360;i+=0.1 ){
 float deginrad =i*3.14/180;
glVertex2f(r*cos(deginrad)+.8,r*sin(deginrad)+.6);
}
glEnd();
}
void cloud2(float r){
glColor3f(0.745, 0.980, 0.960);
glBegin(GL_POLYGON);
for( float i=0;i<360;i+=0.1 ){
 float deginrad =i*3.14/180;
glVertex2f(r*cos(deginrad)+.6   ,r*sin(deginrad)+.6);
}
glEnd();
}
void cloud3(float r){
glColor3f(0.745, 0.980, 0.960);
glBegin(GL_POLYGON);
for( float i=0;i<360;i+=0.1 ){
 float deginrad =i*3.14/180;
glVertex2f(r*cos(deginrad)-.6,r*sin(deginrad)+.3);
}
glEnd();
}
void cloud4(float r){
glColor3f(0.745, 0.980, 0.960);
glBegin(GL_POLYGON);
for( float i=0;i<360;i+=0.1 ){
 float deginrad =i*3.14/180;
glVertex2f(r*cos(deginrad)-.4,r*sin(deginrad)+.3);
}
glEnd();
}
void cloud(){
    cloud1(.2);
    cloud2(.2);
    cloud3(.2);
    cloud4(.2);
}
void display() {  // Display function will draw the image.
    t++;
    glMatrixMode(GL_MODELVIEW);
    float x=.3;
    glClearColor( 0.431, 0.980, 0.971, 1 );  // (In fact, this is the default.)
    glClear( GL_COLOR_BUFFER_BIT );
    c_pos+=speed;
    c_posy-=speed;
    if(c_posy>.9){
        c_posy*=.8;
            }
            if(c_posy<-.9){
        c_posy*=.6;
            }
    glPushMatrix();
    grass(1);
    sun(.2);
    cloud();
    glTranslatef(c_pos,c_posy,0);
    glScalef(.2,.2,0);
    if((s>0)&&(s%5==0)&&z<=360){
            if(z==360){
                z=0;
            }
        glRotatef(z++,0,0,1);
    }
    twitty();
    glPopMatrix();
    glPushMatrix();
    l_pos1-=speed;
    l_pos2-=speed;
    glTranslatef(l_pos1,0,0);
        line1();
    glPopMatrix();
     glPushMatrix();
     glTranslatef(l_pos2,0,0);
        line2();
    glPopMatrix();
    if(c_pos>.9){
        c_pos*=-1;
    }
    if(l_pos1<-.9){
        l_pos1*=-1;
    }
    if(l_pos2<-.9){
        l_pos2*=-1;
    }
    if((c_pos>=l_pos1+.09&&c_pos<=.1)&&c_posy>=.1+.09){
        speed=0;
        }
    if((c_pos>=l_pos2+.6&&c_pos<=l_pos2+.9)&&c_posy<=-.2+.09){
        speed=0;}
        if(speed!=0){
        score(s);
        if(t>=1000){
        score(s++);
        t=0;
        }
        }
        else{
        score(s);
        }
        if(speed == 0){
            lost();
        }
    glutSwapBuffers(); // Required to copy color buffer onto the screen.
    glutPostRedisplay();
}


int main( int argc, char** argv ) {  // Initialize GLUT and
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);    // Use single color buffer and no depth buffer.
    glutInitWindowSize(500,500);         // Size of display area, in pixels.
    glutInitWindowPosition(100,100);     // Location of window in screen coordinates.
    glutCreateWindow("twitty"); // Parameter is window title.
    glutDisplayFunc(display);            // Called when the window needs to be redrawn.
    glutKeyboardFunc(myKey);
    glutSpecialFunc(specialKeys); // Register callback handler for special-key event
	glutMouseFunc(mouse);
    glutMainLoop(); // Run the event loop!  This function does not return.
                    // Program ends when user closes the window.
    return 0;

}
